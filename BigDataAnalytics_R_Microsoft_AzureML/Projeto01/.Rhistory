points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_result <- kmeans(iris_data, centers = 3, iter.max=10, nstart = 50)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(iris_data[, 1], iris_data[, 2], col = predicted_clusters,
xlab = colnames(iris_data)[1], ylab = colnames(iris_data)[2],
main = "K-means Clustering com R Base")
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:3, pch = 8, cex = 2)
kmeans_hartigan <- kmeans(iris_data, centers = 3, nstart = 25, algorithm = "Hartigan-Wong")
kmeans_lloyd <- kmeans(iris_data, centers = 3, nstart = 25, algorithm = "Lloyd")
kmeans_forgy <- kmeans(iris_data, centers = 3, nstart = 25, algorithm = "Forgy")
kmeans_macqueen <- kmeans(iris_data, centers = 3, nstart = 25, algorithm = "MacQueen")
# Comparar os resultados
print(kmeans_hartigan$tot.withinss)
print(kmeans_lloyd$tot.withinss)
print(kmeans_forgy$tot.withinss)
print(kmeans_macqueen$tot.withinss)
# Carregar o conjunto de dados
data(iris)
# Remover a coluna de rótulos reais para realizar o clustering
iris_data <- iris[, -5]
# Função para executar k-means, calcular matriz de confusão, taxa de acerto e plotar os clusters
execute_kmeans <- function(data, algorithm_name, centers = 3, nstart = 25, iter.max = 10) {
set.seed(123)
kmeans_result <- kmeans(data, centers = centers, nstart = nstart, iter.max = iter.max, algorithm = algorithm_name)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(paste("Matriz de Confusão -", algorithm_name))
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(paste("Taxa de Acerto -", algorithm_name))
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(data[, 1], data[, 2], col = predicted_clusters,
xlab = colnames(data)[1], ylab = colnames(data)[2],
main = paste("K-means Clustering -", algorithm_name))
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:centers, pch = 8, cex = 2)
return(kmeans_result$tot.withinss)
}
# Aplicar k-means com diferentes algoritmos
withinss_hartigan <- execute_kmeans(iris_data, "Hartigan-Wong")
withinss_lloyd <- execute_kmeans(iris_data, "Lloyd")
withinss_forgy <- execute_kmeans(iris_data, "Forgy")
withinss_macqueen <- execute_kmeans(iris_data, "MacQueen")
# Comparar os resultados de tot.withinss
print("Tot.Withinss - Hartigan-Wong:")
print(withinss_hartigan)
print("Tot.Withinss - Lloyd:")
print(withinss_lloyd)
print("Tot.Withinss - Forgy:")
print(withinss_forgy)
print("Tot.Withinss - MacQueen:")
print(withinss_macqueen)
# Remover a coluna de rótulos reais para realizar o clustering
iris_data <- iris[, -5]
# Função para executar k-means, calcular matriz de confusão, taxa de acerto e plotar os clusters
execute_kmeans <- function(data, algorithm_name, centers = 3, nstart = 25, iter.max = 10) {
set.seed(123)
kmeans_result <- kmeans(data, centers = centers, nstart = nstart, iter.max = iter.max, algorithm = algorithm_name)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(paste("Matriz de Confusão -", algorithm_name))
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(paste("Taxa de Acerto -", algorithm_name))
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(data[, 1], data[, 2], col = predicted_clusters,
xlab = colnames(data)[1], ylab = colnames(data)[2],
main = paste("K-means Clustering -", algorithm_name))
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:centers, pch = 8, cex = 2)
return(kmeans_result$tot.withinss)
}
# Aplicar k-means com diferentes algoritmos
withinss_hartigan <- execute_kmeans(iris_data, "Hartigan-Wong")
withinss_lloyd <- execute_kmeans(iris_data, "Lloyd")
withinss_forgy <- execute_kmeans(iris_data, "Forgy")
withinss_macqueen <- execute_kmeans(iris_data, "MacQueen")
# Comparar os resultados de tot.withinss
print("Tot.Withinss - Hartigan-Wong:")
print(withinss_hartigan)
print("Tot.Withinss - Lloyd:")
print(withinss_lloyd)
print("Tot.Withinss - Forgy:")
print(withinss_forgy)
print("Tot.Withinss - MacQueen:")
print(withinss_macqueen)
execute_kmeans <- function(data, algorithm_name, centers = 3, nstart = 25, iter.max = 50) {
kmeans_result <- kmeans(data, centers = centers, nstart = nstart, iter.max = iter.max, algorithm = algorithm_name)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(paste("Matriz de Confusão -", algorithm_name))
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(paste("Taxa de Acerto -", algorithm_name))
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(data[, 1], data[, 2], col = predicted_clusters,
xlab = colnames(data)[1], ylab = colnames(data)[2],
main = paste("K-means Clustering -", algorithm_name))
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:centers, pch = 8, cex = 2)
return(kmeans_result$tot.withinss)
}
# Aplicar k-means com diferentes algoritmos
withinss_hartigan <- execute_kmeans(iris_data, "Hartigan-Wong")
withinss_lloyd <- execute_kmeans(iris_data, "Lloyd")
withinss_forgy <- execute_kmeans(iris_data, "Forgy")
withinss_macqueen <- execute_kmeans(iris_data, "MacQueen")
# Comparar os resultados de tot.withinss
print("Tot.Withinss - Hartigan-Wong:")
print(withinss_hartigan)
print("Tot.Withinss - Lloyd:")
print(withinss_lloyd)
print("Tot.Withinss - Forgy:")
print(withinss_forgy)
print("Tot.Withinss - MacQueen:")
print(withinss_macqueen)
execute_kmeans <- function(data, algorithm_name, centers = 3, nstart = 25, iter.max = 50) {
kmeans_result <- kmeans(data, centers = centers, nstart = nstart, iter.max = iter.max, algorithm = algorithm_name)
# Obter os clusters preditos
predicted_clusters <- kmeans_result$cluster
# Criar a matriz de confusão
actual_labels <- iris$Species
confusion_matrix <- table(actual_labels, predicted_clusters)
# Mostrar a matriz de confusão
print(paste("Matriz de Confusão -", algorithm_name))
print(confusion_matrix)
# Calcular a taxa de acerto
correct_predictions <- sum(diag(confusion_matrix))
total_predictions <- sum(confusion_matrix)
accuracy <- correct_predictions / total_predictions
# Mostrar a taxa de acerto
print(paste("Taxa de Acerto -", algorithm_name))
print(accuracy)
# Plotar os clusters encontrados usando as primeiras duas colunas de dados
plot(data[, 1], data[, 2], col = predicted_clusters,
xlab = colnames(data)[1], ylab = colnames(data)[2],
main = paste("K-means Clustering -", algorithm_name))
# Adicionar os centros dos clusters ao plot
points(kmeans_result$centers[, 1], kmeans_result$centers[, 2], col = 1:centers, pch = 8, cex = 2)
return(kmeans_result$tot.withinss)
}
# Aplicar k-means com diferentes algoritmos
withinss_hartigan <- execute_kmeans(iris_data, "Hartigan-Wong")
withinss_lloyd <- execute_kmeans(iris_data, "Lloyd")
withinss_forgy <- execute_kmeans(iris_data, "Forgy")
withinss_macqueen <- execute_kmeans(iris_data, "MacQueen")
# Comparar os resultados de tot.withinss
print("Tot.Withinss - Hartigan-Wong:")
print(withinss_hartigan)
print("Tot.Withinss - Lloyd:")
print(withinss_lloyd)
print("Tot.Withinss - Forgy:")
print(withinss_forgy)
print("Tot.Withinss - MacQueen:")
print(withinss_macqueen)
v1 = c(2, 3, 5)
v2 = c("aa", "bb", "cc", "dd", "ee")
c(v1, v2)
# Suponha que temos as variáveis alturas e pesos
alturas <- c(160, 165, 170, 175, 180)
pesos <- c(55, 60, 65, 70, 75)
# Criação do gráfico de dispersão
plot(pesos, alturas)
# Ajuste do modelo de regressão e adição da linha de regressão no gráfico
abline(lm(alturas ~ pesos))
y = 6
while(y < 5){
y = y+10
print(y)
}
while(y < 5){
y = y+10
print(y)
}
while(y < 5){
y = y+1
print(y)
}
while(y < 5){
y = y+1
print(y)
}
while(y < 5){
y = y+1
print(y)
}
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
alfa + beta
url <- "https://data.mendeley.com/public-files/datasets/tb9yrptydn/files/8dcbbd5f-d7b5-469b-91f2-698093ff6f16/file_downloaded"
arquivo_local <- "dados.xlsx"
resposta <- GET(url, write_disk(arquivo_local, overwrite = TRUE))
library(httr)
library(readxl)
library(caret)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(ggcorrplot)
library(psych)
library(DataExplorer)
resposta <- GET(url, write_disk(arquivo_local, overwrite = TRUE))
if (status_code(resposta) == 200) {
# Lendo o arquivo .xlsx baixado e Importando para um dataframe
dados <- read_excel(arquivo_local)
# Removendo objetos desnecessários para economizar memória
rm(arquivo_local, resposta, url)
message("Download realizado com sucesso!")
# Visualizando as primeiras linhas
print(head(dados))
} else {
message("Falha no download. Código de status: ", status_code(resposta))
}
excel_sheets("dados.xlsx")
dim(dados)
create_report(dados)
setwd("C:/Users/jtmc/Documents/DSA/ProjetosDSA/BigDataAnalytics_R_Microsoft_AzureML/Projeto01")
getwd()
print("Objetivo: Construir um modelo de Machine Learning capaz de prever so consumo de energia de veículos elétricos.")
help(library)
library(httr, quietly = TRUE)
library(readxl, quietly = TRUE)
library(httr, quietly = TRUE)
library(readxl, quietly = TRUE)
library(caret, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(gridExtra, quietly = TRUE)
library(ggcorrplot, quietly = TRUE)
library(psych, quietly = TRUE)
library(DataExplorer, quietly = TRUE)
